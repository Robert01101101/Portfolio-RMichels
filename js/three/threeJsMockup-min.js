var mockupMesh,scene=new THREE.Scene,canvas=document.querySelector("#threeModel"),renderer=new THREE.WebGLRenderer({canvas:canvas,alpha:!0,antialias:!0}),isPhone=canvas.hasAttribute("mockup-phone");const spinner=document.getElementById("spinner");var origHololensPosition,hololens;const video=document.getElementById("video");var videoTexture;function hideSpinner(){spinner.style.display="none",canvas.style.display="block"}video&&(video.play().catch((function(e){console.error("Error attempting to play the video:",e)})),videoTexture=new THREE.VideoTexture(video));var loader=new THREE.GLTFLoader,path=isPhone?"/assets/models/phone.glb":"/assets/models/hlAndBridgeCombined.glb";function handle_load(e){mockupMesh=e.scene.children[0];var n=[];mockupMesh.traverse((function(e){if("Hololens"===e.name&&(origHololensPosition=new THREE.Vector3(e.position.x+50,e.position.y+50,e.position.z),hololens=e),e.name.includes("Ray")){const i=e.geometry.getAttribute("position");createLine((new THREE.Vector3).fromBufferAttribute(i,0),(new THREE.Vector3).fromBufferAttribute(i,1)),n.push(e)}e.isMesh&&("Hologram"===e.material.name&&(e.material.emissive=new THREE.Color(5592439),holograms.push(e)),isPhone&&"screen"===e.material.name?e.material=new THREE.MeshBasicMaterial({map:videoTexture}):e.material.blending=THREE.NormalBlending,e.material.needsUpdate=!0)})),holograms.forEach((e=>{hololens.attach(e)})),n&&n.forEach((e=>mockupMesh.remove(e))),scene.add(mockupMesh),isPhone&&(mockupMesh.position.x=.4),hideSpinner()}loader.load(path,handle_load);var holograms=[],rays=[];const vertexShader="\n  attribute float distanceAlongLine;\n  varying float vDistance;\n\n  void main() {\n    vDistance = distanceAlongLine;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",fragmentShader="\n  varying float vDistance;\n\n  uniform float startFadeIn;\n  uniform float startSolid;\n  uniform float endSolid;\n  uniform float endFadeOut;\n  uniform float maxAlpha;\n  uniform vec3 color; // Base color\n  uniform vec3 emissiveColor; // New uniform for emissive color\n\n  void main() {\n    float alpha = 0.0;\n    if (vDistance < startFadeIn) {\n      alpha = 0.0;\n    } else if (vDistance < startSolid) {\n      alpha = maxAlpha * (vDistance - startFadeIn) / (startSolid - startFadeIn);\n    } else if (vDistance < endSolid) {\n      alpha = maxAlpha;\n    } else if (vDistance < endFadeOut) {\n      alpha = maxAlpha * (1.0 - (vDistance - endSolid) / (endFadeOut - endSolid));\n    } else {\n      alpha = 0.0;\n    }\n    vec3 finalColor = mix(color, emissiveColor, alpha); // Mix between base and emissive color\n    gl_FragColor = vec4(finalColor, alpha); // Use the final color with varying alpha\n  }\n";function createLine(e,n){const i=[];i.push(e),i.push(n);const o=(new THREE.BufferGeometry).setFromPoints(i),a=new Float32Array([0,1]);o.setAttribute("distanceAlongLine",new THREE.BufferAttribute(a,1));const t=new THREE.ShaderMaterial({vertexShader:vertexShader,fragmentShader:fragmentShader,transparent:!0,uniforms:{startFadeIn:{value:.15},startSolid:{value:.5},endSolid:{value:.55},endFadeOut:{value:.95},maxAlpha:{value:1},color:{value:new THREE.Color(.7,.7,1)},emissiveColor:{value:new THREE.Color(.6,.6,1)}}}),r=new THREE.Line(o,t);rays.push(r),scene.add(r)}var camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);camera.position.z=0,camera.position.y=0,camera.rotation.x=0;var ambientLight=isPhone?new THREE.AmbientLight(16777215):new THREE.AmbientLight(16777215,3),light=isPhone?new THREE.PointLight(9474192,.3):new THREE.PointLight(9474192,1);function resizeRendererToDisplaySize(e){const n=e.domElement,i=window.devicePixelRatio,o=n.clientWidth*i|0,a=n.clientHeight*i|0,t=n.width!==o||n.height!==a;return t&&(e.setSize(o,a,!1),windowHalfX=window.innerWidth<xlBreakPoint?window.innerWidth/2:window.innerWidth/4*3,camera.position.z=window.innerWidth>xxxxlBreakPoint?(isPhone?20:22)-xxxxlBreakPoint/smBreakPoint*(isPhone?2.3:.85):window.innerWidth>mdBreakPoint||!isPhone?(isPhone?20:22)-window.innerWidth/smBreakPoint*(isPhone?2.3:.85):10,mockupMesh&&isPhone&&(mockupMesh.position.x=window.innerWidth>mdBreakPoint?.4:0)),t}isPhone?light.position.set(-6,7,6):light.position.set(-2,10,8),scene.add(ambientLight),scene.add(light),renderer.render(scene,camera);var mouseX=0,mouseY=0,windowHalfX=window.innerWidth<xlBreakPoint?window.innerWidth/2:window.innerWidth/4*3,windowHalfY=window.innerHeight/4;function onDocumentMouseMove(e){mouseX=(windowHalfX-e.clientX)/1e3,mouseY=(windowHalfY-e.clientY)/1e3}function animate(){if(requestAnimationFrame(animate),resizeRendererToDisplaySize(renderer)){const e=renderer.domElement;camera.aspect=e.clientWidth/e.clientHeight,camera.updateProjectionMatrix()}if(camera&&scene){var e=isPhone?window.innerWidth>mdBreakPoint?.05:0:-.02;camera.position.x+=e+(mouseX-camera.position.x)*(isPhone?.05:.03),camera.position.y+=(-mouseY-camera.position.y)*(isPhone?.03:.1)+(isPhone?0:.2);var n=new THREE.Vector3(scene.position.x,scene.position.y,scene.position.z);isPhone||(n.y+=7.5,n.x-=1.5),camera.lookAt(n)}var i;rays.forEach(((e,n)=>{const o=.8*perlin.get((.4*camera.position.x+n/5+5e-4*Date.now())/2,.4*camera.position.y/2);e.material.uniforms.maxAlpha.value=o,i=e.material.uniforms.maxAlpha.value}));const o=new THREE.Color(4210773),a=new THREE.Color(11184844),t=o.clone().lerp(a,i);var r=3*Math.sin(.001*Date.now());holograms.forEach((e=>{e.material.emissive=t})),hololens&&(hololens.position.z=origHololensPosition.z+r,hololens.position.x=origHololensPosition.x-mouseX/200),renderer.render(scene,camera)}function initializePerlin(){perlin.seed(Math.random())}document.addEventListener("mousemove",onDocumentMouseMove,!1),animate(),initializePerlin();